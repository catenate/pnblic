nb justify latex syle markup structure postscript academy publish @sakhmechet
nb contact slava akhmechet email coffeemug@gmail.com
Akhmechet, S.  20061008.  What is LaTeX and why you should care.
Defmacro.org: Made with alien technology.
http://www.defmacro.org/ramblings/latex.html
http://reprog.wordpress.com/2010/08/03/the-second-stupidest-thing-in-the-world/


nb haskell intuit express rename hsname hsident source text identifier @sakhmechet
Akhmechet, S. 20061215.  On Haskell, intuition and expressive power.
Defmacro.org: Made with alien technology.
http://www.defmacro.org/ramblings/haskell-productivity.html


nb haskell web application scaffold introspect data separate camel case identifier typeclass @sakhmechet
Akhmechet, S.  20070206.  Haskell and web applications.  Defmacro.org:
Made with alien technology.
http://www.defmacro.org/ramblings/haskell-web.html

Introspecting data structures to generate boilerplate code that makes
the process of building basic web front ends automatic in Haskell,
like Ruby on Rails.

> introspectData :: Data a ⇒ a → [(String, String)]
> introspectData a = zip fields (gmapQ gshow a)
> 	where fields = constrFields $ toConstr a

introspectData someUser
→ [("firstName", "Joe"),
    ("lastName", "Average"),
    ("title", "Programmer"),
    ("age", "33")]

> renderFieldName = capitalize . unwords
> 		. groupBy (λ_→not . isUpper)
> 	where capitalize (x:xs) = toUpper x : xs

renderFieldName "firstName"
→ "First Name"
renderFieldName "title"
→ "Title"

We also define a helper function mapFields that we'll be using in
our renderers.  It simply takes a function and a data object as
arguments and applies the function to each field/value pair in the
data object.

> mapFields renderField i =
> 	concatHtml $ map renderField (introspectData i)


nb reduce expression lambda calculus haskell @sakhmechet
Akhmechet, S.  20080224.  A lambda calculus reducer.  Defmacro.org: Made
with alien technology.
http://www.defmacro.org/ramblings/lambda-reducer.html
http://www.defmacro.org/ramblings/reducer.hs

AST.  Print AST.  Parse AST.  Reduction utilities.  Alpha reduction.
Beta reduction.  Reduce to normal order.  Interaction.

Here is a trace of an argument applied to an identity function:

runhaskell reducer.hs
> (\d.d)a
((\d.d) a)
a

Writing a short tool like this is an excellent way to get a reasonably
good understanding of lambda calculus, functions as first class objects,
purity, and laziness.  For example, a snippet below provides a great
illustration for partial evaluation:

> (\a.\b.c a b)i
((\a.(\b.((c a) b))) i)
(\b.((c i) b))


nb positive negative describe introspect attitude
Sullivan, B.J.  -20100802.  Research shows what you say about others
says a lot about you.  Science blog: Science news straight from the source.
http://scienceblog.com/37144/research-shows-what-you-say-about-others-says-a-lot-about-you/?

The researchers found a person’s tendency to describe others in positive
terms is an important indicator of the positivity of the person’s own
personality traits.  They discovered particularly strong associations
between positively judging others and how enthusiastic, happy, kind-
hearted, courteous, emotionally stable and capable the person describes
oneself and is described by others.


nb rails work flow controller action instance variable view erb embedded ruby
/home/jdc/Dropbox/doc/pragprog/agile-web-development-with-rails_b6_0.txt:/The Story So Far/

The user navigates to our application.  In our case, we do that using a
local URL such as http://localhost:3000/say/hello.  Rails then matches
the route pattern, which it previously split into two parts and analyzed.
The say part is taken to be the name of a controller, so Rails creates a
new instance of the Ruby class SayController (which it ﬁnds in
app/controllers/say_controller.rb).  The next part of the pattern,
hello, identiﬁes an action.  Rails invokes a method of that name in
the controller.  This action method creates a new Time object holding
the current time and tucks it away in the @time instance variable.
Rails looks for a template to display the result.  It searches the
directory app/views for a subdirectory with the same name as the
controller (say) and in that subdirectory for a ﬁle named after the
action (hello.html.erb).  Rails processes this ﬁle through the ERb
templating system, executing any embedded Ruby and substituting in
values set up by the controller.  The result is returned to the browser,
and Rails ﬁnishes processing this request.


nb nonlinear pipeline command output temporary file function style rc(1) manual
This is a little syntactic sugar to work with the output of commands
without storing the output in temporary files (or variables, which omit
carriage returns).

          <{command}
          >{command}
               The command is executed asynchronously with its stan-
               dard output or standard input connected to a pipe.  The
               value of the argument is the name of a file referring
               to the other end of the pipe.  This allows the con-
               struction of non-linear pipelines.  For example, the
               following runs two commands old and new and uses cmp to
               compare their outputs
                    cmp <{old} <{new}

grep def app/controllers/say_controller.rb | grep hello
grep hello <{grep def app/controllers/say_controller.rb}

cp <{sed 's,'',’,g' tmp1} tmp1

flag x +
file=tmp1
ext=apos
cp <{sed 's,'',’,g' tmp1} $file.$ext
diff $file $file.$ext


nb rails route find action method view file rc script

route=say/hello
controller=`{echo $route | cut -d/ -f1}
action=`{echo $route | cut -d/ -f2}
g ('def '$action) app/controllers/^$controller^_controller.rb
ls app/views/$controller/$action.html.erb


nb model state database business rule mvc rails
/home/jdc/Dropbox/doc/pragprog/agile-web-development-with-rails_b6_0.txt:/^3.1/

The model is responsible for maintaining the state of the application.
Sometimes this state is transient, lasting for just a couple of inter-
actions with the user.  Sometimes the state is permanent and will be
stored outside the application, often in a database.  A model is more
than just data; it enforces all the business rules that apply to that data. ….
This makes sense; by putting the implementation of these business rules
in the model, we make sure that nothing else in the application can make
our data invalid.  The model acts as both a gatekeeper and a data store.


nb view generate user interface access model data mvc rails
/home/jdc/Dropbox/doc/pragprog/agile-web-development-with-rails_b6_0.txt:/^3.1/

The view is responsible for generating a user interface, normally based
on data in the model.  ….  [Data] will be accessible via the model,
but it will be a view that accesses the [data] from the model and
formats it for the end user.  Although the view may present the user
with various ways of inputting data, the view itself never handles
incoming data.  The view’s work is done once the data is displayed.
There may well be many views that access the same model data, often for
different purposes.


nb controller event interact display mvc rails
/home/jdc/Dropbox/doc/pragprog/agile-web-development-with-rails_b6_0.txt:/^3.1/

Controllers orchestrate the application.  Controllers receive events
from the outside world (normally user input), interact with the model,
and display an appropriate view to the user.


nb mvc application architecture separate concern rails
/home/jdc/Dropbox/doc/pragprog/agile-web-development-with-rails_b6_0.txt:/^3.1/

The MVC architecture was originally intended for conventional GUI
applications, where developers found the separation of concerns led to
far less coupling, which in turn made the code easier to write and
maintain.  ….  In a Rails application, an incoming request is ﬁrst sent
to a router, which works out where in the application the request should
be sent and how the request itself should be parsed.  Ultimately, this
phase identiﬁes a particular method (called an action in Rails parlance)
somewhere in the controller code.  The action might look at data in the
request, it might interact with the model, and it might cause other
actions to be invoked.  Eventually the action prepares information for
the view, which renders something to the user.


nb orm object table row instance column attribute active record rails
/home/jdc/Dropbox/doc/pragprog/agile-web-development-with-rails_b6_0.txt:/an ORM layer maps/

So, an ORM layer maps tables to classes, rows to objects, and columns to
attributes of those objects.  Class methods are used to perform table-
level operations, and instance methods perform operations on the
individual rows.

	require 'active_record'

	class Order < ActiveRecord::Base
	end

	order = Order.find(1)
	order.discount = 0.5
	order.save


nb ruby identifier name format 
/home/jdc/Dropbox/doc/pragprog/agile-web-development-with-rails_b6_0.txt:/Ruby Names/

Local variables, method parameters, and method names should all start
with a lowercase letter or with an underscore: order, line_item, and
xr2000 are all valid.  Instance variables (which we talk about on page
64) begin with an “at” sign (@), such as @quantity and @product_id.
The Ruby convention is to use underscores to separate words in a
multiword method or variable name (so line_item is preferable to lineItem).

Class names, module names, and constants must start with an uppercase letter.
By convention they use capitalization, rather than underscores, to
distinguish the start of words within the name.  Class names look like
Object, PurchaseOrder, and LineItem.

Rails uses symbols to identify things.  In particular, it uses them as
keys when naming method parameters and looking things up in hashes.
For example: redirect_to :action => "edit" , :id => params[:id]


nb ruby capitalize space separate word string
name.split(' ').collect{|s| s.capitalize}.join(' ')
